
@{
    ViewData["Title"] = "IngresoMuestras";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .user-icon-container {
        display: flex;
        align-items: center;
        margin-left: 30px;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
            color: #a79a66;
        }

        .user-icon-container .page-title-home {
            margin-left: -4px;
            color: #a79a66;
        }

    .page-title-home {
        margin-top: 18px;
    }

</style>

@section PagePreTitle {


    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-home" width="36" height="36" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <polyline points="5 12 3 12 12 3 21 12 19 12" />
                <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" />
                <path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6" />
            </svg>
            <h2 class="page-title-home">
                Ingreso de Muestras
            </h2>
        </div>
    </div>

}

@section PageActions {
    <div id="popupContainer" style="width: 300px;">
        <div id="formContainer" style="width: 300px; margin: 20px auto;">

            @(Html.DevExtreme().Form<LBW.Models.Entity.SubProducto>()
                .Items(items =>
                {
                    items.AddSimpleFor(m => m.ProductoID)
                    
                    .Label(l => l
                    .Text("Producto")
                    .Location(FormLabelLocation.Top) // Ubicar la etiqueta en la parte superior del control
                    )
                    .Editor(e => e
                    .Lookup()
                    .Name("productoLookup")
                    .DataSource(ds => ds.WebApi().Controller("SubProductoes").LoadAction("ProductosFormLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                    );
                })
                )
        </div>
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />

        <div style="text-align: center; margin-top: 10px;">
            <button id="selectButton"></button>
        </div>
    </div>
}

 @using (Html.BeginForm("Post", "Pagoes", FormMethod.Post, new { id = "myForm1", @class = "myForm", enctype = "multipart/form-data" }))
{
    @(Html.DevExtreme().Form<LBW.Models.Entity.SubProducto>()
    .Items(items =>
    {

        items.AddSimpleFor(m => m.Nombre);

        items.AddSimpleFor(m => m.EstadoID)
            .Label(l => l.Text("Estado"))
            .Editor(e => e

                .Lookup()
                .DataSource(ds => ds.WebApi().Controller("SubProductoes").LoadAction("EstadosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            );
    })
)
}



<script>
 

    $(function () {
        var popupInstance = $("#popupContainer").dxPopup({
            title: "Seleccionar un Producto",
            maxWidth: 500, // Establecer el ancho máximo del popup en 500px
            visible: true, // Mostrar el pop-up automáticamente al cargar la página
            onHidden: function (e) {
                // Este evento se dispara cuando se oculta el pop-up
                console.log("Pop-up abierto");
            }
                
        }).dxPopup("instance");

        $("#selectButton").dxButton({
            stylingMode: "contained", // Aplicar estilo contained al botón
            text: "Cerrar",
            type: "default",
            width: 120,

            onClick: function (e) {
                var productoLookup = $("#productoLookup").dxLookup("instance");

                if (productoLookup) {
                    var selectedProductId = productoLookup.option("value");
                    // Ahora 'selectedProductId' contiene el ProductoID seleccionado
                    console.log("Producto ID seleccionado:", selectedProductId);

                } else {
                    console.error("El control Lookup no se ha inicializado correctamente.");
                }

                popupInstance.hide(); // Cerrar el popup al hacer clic en el botón

            },
            elementAttr: {
                style: "text-align: center; line-height: normal;" // Centrar el texto dentro del botón
            }
        });
    });

    $(document).on('submit', '.myForm', function (e) {
        e.preventDefault();

        var form = $(this);
        var url = form.attr('action');

        // Desactivar el botón de envío
        form.find(':submit').prop('disabled', true);

        var formData = new FormData(form[0]); // Construir objeto FormData

        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                DevExpress.ui.notify('Tu solicitud fue enviada exitosamente\nNro de Solicitud: ' + response.IdPago, 'success', 6000);

                form.find(':submit').prop('disabled', false);

                form[0].reset();

                // Después de 2 segundos, recargar la página
                setTimeout(function () {
                    location.reload();
                }, 3000);
            },
            error: function () {
                DevExpress.ui.notify('Hubo un error al enviar la solicitud.', 'error', 6000);

                form.find(':submit').prop('disabled', false);
            }
        });
    });

</script>